
/*
Auto-generated by CVXPYgen on July 19, 2025 at 17:32:05.
Content: Python binding with pybind11.
*/

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <ctime>
#include "cpg_module.hpp"

extern "C" {
    #include "include/cpg_workspace.h"
    #include "include/cpg_solve.h"
}

namespace py = pybind11;

static int i;

CPG_Result_cpp_t solve_cpp(struct CPG_Updated_cpp_t& CPG_Updated_cpp, struct CPG_Params_cpp_t& CPG_Params_cpp){

    // Pass changed user-defined parameter values to the solver
    if (CPG_Updated_cpp.w_tr) {
        cpg_update_w_tr(CPG_Params_cpp.w_tr);
    }
    if (CPG_Updated_cpp.f_dt_last) {
        cpg_update_f_dt_last(CPG_Params_cpp.f_dt_last);
    }
    if (CPG_Updated_cpp.gf_dt_last) {
        for(i=0; i<156; i++) {
            cpg_update_gf_dt_last(i, CPG_Params_cpp.gf_dt_last[i]);
        }
    }
    if (CPG_Updated_cpp.f_ct_last) {
        cpg_update_f_ct_last(CPG_Params_cpp.f_ct_last);
    }
    if (CPG_Updated_cpp.A_ct_last) {
        for(i=0; i<143; i++) {
            cpg_update_A_ct_last(i, CPG_Params_cpp.A_ct_last[i]);
        }
    }
    if (CPG_Updated_cpp.B_ct_last) {
        for(i=0; i<44; i++) {
            cpg_update_B_ct_last(i, CPG_Params_cpp.B_ct_last[i]);
        }
    }
    if (CPG_Updated_cpp.C_ct_last) {
        for(i=0; i<44; i++) {
            cpg_update_C_ct_last(i, CPG_Params_cpp.C_ct_last[i]);
        }
    }
    if (CPG_Updated_cpp.S_ct_last) {
        for(i=0; i<11; i++) {
            cpg_update_S_ct_last(i, CPG_Params_cpp.S_ct_last[i]);
        }
    }
    if (CPG_Updated_cpp.X_last) {
        for(i=0; i<156; i++) {
            cpg_update_X_last(i, CPG_Params_cpp.X_last[i]);
        }
    }
    if (CPG_Updated_cpp.f_bar) {
        for(i=0; i<143; i++) {
            cpg_update_f_bar(i, CPG_Params_cpp.f_bar[i]);
        }
    }
    if (CPG_Updated_cpp.A_bar) {
        for(i=0; i<1859; i++) {
            cpg_update_A_bar(i, CPG_Params_cpp.A_bar[i]);
        }
    }
    if (CPG_Updated_cpp.B_bar) {
        for(i=0; i<572; i++) {
            cpg_update_B_bar(i, CPG_Params_cpp.B_bar[i]);
        }
    }
    if (CPG_Updated_cpp.C_bar) {
        for(i=0; i<572; i++) {
            cpg_update_C_bar(i, CPG_Params_cpp.C_bar[i]);
        }
    }
    if (CPG_Updated_cpp.S_bar) {
        for(i=0; i<143; i++) {
            cpg_update_S_bar(i, CPG_Params_cpp.S_bar[i]);
        }
    }
    if (CPG_Updated_cpp.U_last) {
        for(i=0; i<48; i++) {
            cpg_update_U_last(i, CPG_Params_cpp.U_last[i]);
        }
    }
    if (CPG_Updated_cpp.S_last) {
        for(i=0; i<11; i++) {
            cpg_update_S_last(i, CPG_Params_cpp.S_last[i]);
        }
    }

    // Solve
    std::clock_t ASA_start = std::clock();
    cpg_solve();
    std::clock_t ASA_end = std::clock();

    // Arrange and return results
    CPG_Prim_cpp_t CPG_Prim_cpp {};
    for(i=0; i<156; i++) {
        CPG_Prim_cpp.dx[i] = CPG_Prim.dx[i];
    }
    for(i=0; i<48; i++) {
        CPG_Prim_cpp.du[i] = CPG_Prim.du[i];
    }
    for(i=0; i<11; i++) {
        CPG_Prim_cpp.ds[i] = CPG_Prim.ds[i];
    }
    for(i=0; i<143; i++) {
        CPG_Prim_cpp.nu[i] = CPG_Prim.nu[i];
    }
    for(i=0; i<11; i++) {
        CPG_Prim_cpp.S[i] = CPG_Prim.S[i];
    }
    for(i=0; i<156; i++) {
        CPG_Prim_cpp.X[i] = CPG_Prim.X[i];
    }
    for(i=0; i<48; i++) {
        CPG_Prim_cpp.U[i] = CPG_Prim.U[i];
    }
    CPG_Dual_cpp_t CPG_Dual_cpp {};
    for(i=0; i<13; i++) {
        CPG_Dual_cpp.d0[i] = CPG_Dual.d0[i];
    }
    for(i=0; i<13; i++) {
        CPG_Dual_cpp.d1[i] = CPG_Dual.d1[i];
    }
    for(i=0; i<13; i++) {
        CPG_Dual_cpp.d2[i] = CPG_Dual.d2[i];
    }
    for(i=0; i<13; i++) {
        CPG_Dual_cpp.d3[i] = CPG_Dual.d3[i];
    }
    for(i=0; i<13; i++) {
        CPG_Dual_cpp.d4[i] = CPG_Dual.d4[i];
    }
    for(i=0; i<13; i++) {
        CPG_Dual_cpp.d5[i] = CPG_Dual.d5[i];
    }
    for(i=0; i<13; i++) {
        CPG_Dual_cpp.d6[i] = CPG_Dual.d6[i];
    }
    for(i=0; i<13; i++) {
        CPG_Dual_cpp.d7[i] = CPG_Dual.d7[i];
    }
    for(i=0; i<13; i++) {
        CPG_Dual_cpp.d8[i] = CPG_Dual.d8[i];
    }
    for(i=0; i<13; i++) {
        CPG_Dual_cpp.d9[i] = CPG_Dual.d9[i];
    }
    for(i=0; i<13; i++) {
        CPG_Dual_cpp.d10[i] = CPG_Dual.d10[i];
    }
    for(i=0; i<156; i++) {
        CPG_Dual_cpp.d11[i] = CPG_Dual.d11[i];
    }
    for(i=0; i<48; i++) {
        CPG_Dual_cpp.d12[i] = CPG_Dual.d12[i];
    }
    for(i=0; i<11; i++) {
        CPG_Dual_cpp.d13[i] = CPG_Dual.d13[i];
    }
    for(i=0; i<11; i++) {
        CPG_Dual_cpp.d14[i] = CPG_Dual.d14[i];
    }
    CPG_Dual_cpp.d15 = CPG_Dual.d15;
    for(i=0; i<11; i++) {
        CPG_Dual_cpp.d16[i] = CPG_Dual.d16[i];
    }
    for(i=0; i<8; i++) {
        CPG_Dual_cpp.d17[i] = CPG_Dual.d17[i];
    }
    for(i=0; i<8; i++) {
        CPG_Dual_cpp.d18[i] = CPG_Dual.d18[i];
    }
    for(i=0; i<3; i++) {
        CPG_Dual_cpp.d19[i] = CPG_Dual.d19[i];
    }
    for(i=0; i<3; i++) {
        CPG_Dual_cpp.d20[i] = CPG_Dual.d20[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d21[i] = CPG_Dual.d21[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d22[i] = CPG_Dual.d22[i];
    }
    for(i=0; i<12; i++) {
        CPG_Dual_cpp.d23[i] = CPG_Dual.d23[i];
    }
    for(i=0; i<12; i++) {
        CPG_Dual_cpp.d24[i] = CPG_Dual.d24[i];
    }
    for(i=0; i<36; i++) {
        CPG_Dual_cpp.d25[i] = CPG_Dual.d25[i];
    }
    CPG_Info_cpp_t CPG_Info_cpp {};
    CPG_Info_cpp.obj_val = CPG_Info.obj_val;
    CPG_Info_cpp.iter = CPG_Info.iter;
    CPG_Info_cpp.status = CPG_Info.status;
    CPG_Info_cpp.pri_res = CPG_Info.pri_res;
    CPG_Info_cpp.dua_res = CPG_Info.dua_res;
    CPG_Info_cpp.time = 1.0 * (ASA_end - ASA_start) / CLOCKS_PER_SEC;
    CPG_Result_cpp_t CPG_Result_cpp {};
    CPG_Result_cpp.prim = CPG_Prim_cpp;
    CPG_Result_cpp.dual = CPG_Dual_cpp;
    CPG_Result_cpp.info = CPG_Info_cpp;
    return CPG_Result_cpp;

}

PYBIND11_MODULE(cpg_module, m) {

    py::class_<CPG_Params_cpp_t>(m, "cpg_params")
            .def(py::init<>())
            .def_readwrite("w_tr", &CPG_Params_cpp_t::w_tr)
            .def_readwrite("f_dt_last", &CPG_Params_cpp_t::f_dt_last)
            .def_readwrite("gf_dt_last", &CPG_Params_cpp_t::gf_dt_last)
            .def_readwrite("f_ct_last", &CPG_Params_cpp_t::f_ct_last)
            .def_readwrite("A_ct_last", &CPG_Params_cpp_t::A_ct_last)
            .def_readwrite("B_ct_last", &CPG_Params_cpp_t::B_ct_last)
            .def_readwrite("C_ct_last", &CPG_Params_cpp_t::C_ct_last)
            .def_readwrite("S_ct_last", &CPG_Params_cpp_t::S_ct_last)
            .def_readwrite("X_last", &CPG_Params_cpp_t::X_last)
            .def_readwrite("f_bar", &CPG_Params_cpp_t::f_bar)
            .def_readwrite("A_bar", &CPG_Params_cpp_t::A_bar)
            .def_readwrite("B_bar", &CPG_Params_cpp_t::B_bar)
            .def_readwrite("C_bar", &CPG_Params_cpp_t::C_bar)
            .def_readwrite("S_bar", &CPG_Params_cpp_t::S_bar)
            .def_readwrite("U_last", &CPG_Params_cpp_t::U_last)
            .def_readwrite("S_last", &CPG_Params_cpp_t::S_last)
            ;

    py::class_<CPG_Updated_cpp_t>(m, "cpg_updated")
            .def(py::init<>())
            .def_readwrite("w_tr", &CPG_Updated_cpp_t::w_tr)
            .def_readwrite("f_dt_last", &CPG_Updated_cpp_t::f_dt_last)
            .def_readwrite("gf_dt_last", &CPG_Updated_cpp_t::gf_dt_last)
            .def_readwrite("f_ct_last", &CPG_Updated_cpp_t::f_ct_last)
            .def_readwrite("A_ct_last", &CPG_Updated_cpp_t::A_ct_last)
            .def_readwrite("B_ct_last", &CPG_Updated_cpp_t::B_ct_last)
            .def_readwrite("C_ct_last", &CPG_Updated_cpp_t::C_ct_last)
            .def_readwrite("S_ct_last", &CPG_Updated_cpp_t::S_ct_last)
            .def_readwrite("X_last", &CPG_Updated_cpp_t::X_last)
            .def_readwrite("f_bar", &CPG_Updated_cpp_t::f_bar)
            .def_readwrite("A_bar", &CPG_Updated_cpp_t::A_bar)
            .def_readwrite("B_bar", &CPG_Updated_cpp_t::B_bar)
            .def_readwrite("C_bar", &CPG_Updated_cpp_t::C_bar)
            .def_readwrite("S_bar", &CPG_Updated_cpp_t::S_bar)
            .def_readwrite("U_last", &CPG_Updated_cpp_t::U_last)
            .def_readwrite("S_last", &CPG_Updated_cpp_t::S_last)
            ;

    py::class_<CPG_Prim_cpp_t>(m, "cpg_prim")
            .def(py::init<>())
            .def_readwrite("dx", &CPG_Prim_cpp_t::dx)
            .def_readwrite("du", &CPG_Prim_cpp_t::du)
            .def_readwrite("ds", &CPG_Prim_cpp_t::ds)
            .def_readwrite("nu", &CPG_Prim_cpp_t::nu)
            .def_readwrite("S", &CPG_Prim_cpp_t::S)
            .def_readwrite("X", &CPG_Prim_cpp_t::X)
            .def_readwrite("U", &CPG_Prim_cpp_t::U)
            ;

    py::class_<CPG_Dual_cpp_t>(m, "cpg_dual")
            .def(py::init<>())
            .def_readwrite("d0", &CPG_Dual_cpp_t::d0)
            .def_readwrite("d1", &CPG_Dual_cpp_t::d1)
            .def_readwrite("d2", &CPG_Dual_cpp_t::d2)
            .def_readwrite("d3", &CPG_Dual_cpp_t::d3)
            .def_readwrite("d4", &CPG_Dual_cpp_t::d4)
            .def_readwrite("d5", &CPG_Dual_cpp_t::d5)
            .def_readwrite("d6", &CPG_Dual_cpp_t::d6)
            .def_readwrite("d7", &CPG_Dual_cpp_t::d7)
            .def_readwrite("d8", &CPG_Dual_cpp_t::d8)
            .def_readwrite("d9", &CPG_Dual_cpp_t::d9)
            .def_readwrite("d10", &CPG_Dual_cpp_t::d10)
            .def_readwrite("d11", &CPG_Dual_cpp_t::d11)
            .def_readwrite("d12", &CPG_Dual_cpp_t::d12)
            .def_readwrite("d13", &CPG_Dual_cpp_t::d13)
            .def_readwrite("d14", &CPG_Dual_cpp_t::d14)
            .def_readwrite("d15", &CPG_Dual_cpp_t::d15)
            .def_readwrite("d16", &CPG_Dual_cpp_t::d16)
            .def_readwrite("d17", &CPG_Dual_cpp_t::d17)
            .def_readwrite("d18", &CPG_Dual_cpp_t::d18)
            .def_readwrite("d19", &CPG_Dual_cpp_t::d19)
            .def_readwrite("d20", &CPG_Dual_cpp_t::d20)
            .def_readwrite("d21", &CPG_Dual_cpp_t::d21)
            .def_readwrite("d22", &CPG_Dual_cpp_t::d22)
            .def_readwrite("d23", &CPG_Dual_cpp_t::d23)
            .def_readwrite("d24", &CPG_Dual_cpp_t::d24)
            .def_readwrite("d25", &CPG_Dual_cpp_t::d25)
            ;

    py::class_<CPG_Info_cpp_t>(m, "cpg_info")
            .def(py::init<>())
            .def_readwrite("obj_val", &CPG_Info_cpp_t::obj_val)
            .def_readwrite("iter", &CPG_Info_cpp_t::iter)
            .def_readwrite("status", &CPG_Info_cpp_t::status)
            .def_readwrite("pri_res", &CPG_Info_cpp_t::pri_res)
            .def_readwrite("dua_res", &CPG_Info_cpp_t::dua_res)
            .def_readwrite("time", &CPG_Info_cpp_t::time)
            ;

    py::class_<CPG_Result_cpp_t>(m, "cpg_result")
            .def(py::init<>())
            .def_readwrite("cpg_prim", &CPG_Result_cpp_t::prim)
            .def_readwrite("cpg_dual", &CPG_Result_cpp_t::dual)
            .def_readwrite("cpg_info", &CPG_Result_cpp_t::info)
            ;

    m.def("solve", &solve_cpp);

    m.def("set_solver_default_settings", &cpg_set_solver_default_settings);
    m.def("set_solver_max_iters", &cpg_set_solver_max_iters);
    m.def("set_solver_bisect_iters", &cpg_set_solver_bisect_iters);
    m.def("set_solver_ruiz_iters", &cpg_set_solver_ruiz_iters);
    m.def("set_solver_iter_ref_iters", &cpg_set_solver_iter_ref_iters);
    m.def("set_solver_kkt_static_reg", &cpg_set_solver_kkt_static_reg);
    m.def("set_solver_kkt_dynamic_reg", &cpg_set_solver_kkt_dynamic_reg);
    m.def("set_solver_abstol", &cpg_set_solver_abstol);
    m.def("set_solver_reltol", &cpg_set_solver_reltol);
    m.def("set_solver_abstol_inacc", &cpg_set_solver_abstol_inacc);
    m.def("set_solver_reltol_inacc", &cpg_set_solver_reltol_inacc);
    m.def("set_solver_verbose", &cpg_set_solver_verbose);

}
