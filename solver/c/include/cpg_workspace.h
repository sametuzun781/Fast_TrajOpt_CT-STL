
/*
Auto-generated by CVXPYgen on July 19, 2025 at 17:32:05.
Content: Type definitions and variable declarations.
*/

#include "qoco.h"

#ifndef CPG_TYPES_H
# define CPG_TYPES_H

typedef QOCOFloat cpg_float;
typedef QOCOInt cpg_int;

// Compressed sparse column matrix
typedef struct {
  cpg_int      *p;
  cpg_int      *i;
  cpg_float    *x;
  cpg_int      nnz;
} cpg_csc;

// Canonical parameters
typedef struct {
  cpg_csc      *P;         // Canonical parameter P
  cpg_float    *c;         // Canonical parameter c
  cpg_float    d;          // Canonical parameter d
  cpg_csc      *A;         // Canonical parameter A
  cpg_float    *b;         // Canonical parameter b
  cpg_csc      *G;         // Canonical parameter G
  cpg_float    *h;         // Canonical parameter h
} Canon_Params_t;

// Flags indicating outdated canonical parameters
typedef struct {
  int        P;            // Bool, if canonical parameter P outdated
  int        c;            // Bool, if canonical parameter c outdated
  int        d;            // Bool, if canonical parameter d outdated
  int        A;            // Bool, if canonical parameter A outdated
  int        b;            // Bool, if canonical parameter b outdated
  int        G;            // Bool, if canonical parameter G outdated
  int        h;            // Bool, if canonical parameter h outdated
} Canon_Outdated_t;

// Primal solution
typedef struct {
  cpg_float    *dx;        // Your variable dx
  cpg_float    *du;        // Your variable du
  cpg_float    *ds;        // Your variable ds
  cpg_float    *nu;        // Your variable nu
  cpg_float    *S;         // Your variable S
  cpg_float    *X;         // Your variable X
  cpg_float    *U;         // Your variable U
} CPG_Prim_t;

// Dual solution
typedef struct {
  cpg_float    *d0;        // Your dual variable for constraint d0
  cpg_float    *d1;        // Your dual variable for constraint d1
  cpg_float    *d2;        // Your dual variable for constraint d2
  cpg_float    *d3;        // Your dual variable for constraint d3
  cpg_float    *d4;        // Your dual variable for constraint d4
  cpg_float    *d5;        // Your dual variable for constraint d5
  cpg_float    *d6;        // Your dual variable for constraint d6
  cpg_float    *d7;        // Your dual variable for constraint d7
  cpg_float    *d8;        // Your dual variable for constraint d8
  cpg_float    *d9;        // Your dual variable for constraint d9
  cpg_float    *d10;       // Your dual variable for constraint d10
  cpg_float    *d11;       // Your dual variable for constraint d11
  cpg_float    *d12;       // Your dual variable for constraint d12
  cpg_float    *d13;       // Your dual variable for constraint d13
  cpg_float    *d14;       // Your dual variable for constraint d14
  cpg_float    d15;        // Your dual variable for constraint d15
  cpg_float    *d16;       // Your dual variable for constraint d16
  cpg_float    *d17;       // Your dual variable for constraint d17
  cpg_float    *d18;       // Your dual variable for constraint d18
  cpg_float    *d19;       // Your dual variable for constraint d19
  cpg_float    *d20;       // Your dual variable for constraint d20
  cpg_float    *d21;       // Your dual variable for constraint d21
  cpg_float    *d22;       // Your dual variable for constraint d22
  cpg_float    *d23;       // Your dual variable for constraint d23
  cpg_float    *d24;       // Your dual variable for constraint d24
  cpg_float    *d25;       // Your dual variable for constraint d25
} CPG_Dual_t;

// Solver information
typedef struct {
  cpg_float    obj_val;    // Objective function value
  cpg_int      iter;       // Number of iterations
  cpg_int      status;     // Solver status
  cpg_float    pri_res;    // Primal residual
  cpg_float    dua_res;    // Dual residual
} CPG_Info_t;

// Solution and solver information
typedef struct {
  CPG_Prim_t *prim;        // Primal solution
  CPG_Dual_t *dual;        // Dual solution
  CPG_Info_t *info;        // Solver info
} CPG_Result_t;

// Parameter deltas
typedef struct {
  cpg_float    *w_tr;      // Delta of your parameter w_tr
  cpg_float    *f_dt_last;   // Delta of your parameter f_dt_last
  cpg_float    *gf_dt_last;   // Delta of your parameter gf_dt_last
  cpg_float    *f_ct_last;   // Delta of your parameter f_ct_last
  cpg_float    *A_ct_last;   // Delta of your parameter A_ct_last
  cpg_float    *B_ct_last;   // Delta of your parameter B_ct_last
  cpg_float    *C_ct_last;   // Delta of your parameter C_ct_last
  cpg_float    *S_ct_last;   // Delta of your parameter S_ct_last
  cpg_float    *X_last;    // Delta of your parameter X_last
  cpg_float    *f_bar;     // Delta of your parameter f_bar
  cpg_float    *A_bar;     // Delta of your parameter A_bar
  cpg_float    *B_bar;     // Delta of your parameter B_bar
  cpg_float    *C_bar;     // Delta of your parameter C_bar
  cpg_float    *S_bar;     // Delta of your parameter S_bar
  cpg_float    *U_last;    // Delta of your parameter U_last
  cpg_float    *S_last;    // Delta of your parameter S_last
} CPG_Delta_t;

// Solver settings
typedef struct {
  cpg_int    max_iters;
  cpg_int    bisect_iters;
  cpg_int    ruiz_iters;
  cpg_int    iter_ref_iters;
  cpg_float  kkt_static_reg;
  cpg_float  kkt_dynamic_reg;
  cpg_float  abstol;
  cpg_float  reltol;
  cpg_float  abstol_inacc;
  cpg_float  reltol_inacc;
  cpg_int    verbose;
} Canon_Settings_t;

#endif // ifndef CPG_TYPES_H

// Vector containing flattened user-defined parameters
extern cpg_float cpg_params_vec[3906];

// Sparse mappings from user-defined to canonical parameters
extern cpg_csc canon_P_map;
extern cpg_csc canon_c_map;
extern cpg_csc canon_d_map;
extern cpg_csc canon_A_map;
extern cpg_csc canon_b_map;

// Canonical parameters
extern cpg_csc canon_P;
extern cpg_csc canon_P_conditioning;
extern cpg_float canon_c[788];
extern cpg_float canon_c_conditioning[788];
extern cpg_csc canon_A;
extern cpg_csc canon_A_conditioning;
extern cpg_float canon_b[389];
extern cpg_float canon_b_conditioning[389];
extern cpg_csc canon_G;
extern cpg_csc canon_G_conditioning;
extern cpg_float canon_h[713];
extern cpg_float canon_h_conditioning[713];

// Struct containing canonical parameters
extern Canon_Params_t Canon_Params;
extern Canon_Params_t Canon_Params_conditioning;

// Struct containing flags for outdated canonical parameters
extern Canon_Outdated_t Canon_Outdated;

// User-defined variables
extern cpg_float cpg_dx[156];
extern cpg_float cpg_du[48];
extern cpg_float cpg_ds[11];
extern cpg_float cpg_nu[143];
extern cpg_float cpg_S[11];
extern cpg_float cpg_X[156];
extern cpg_float cpg_U[48];

// Dual variables associated with user-defined constraints
extern cpg_float cpg_d0[13];
extern cpg_float cpg_d1[13];
extern cpg_float cpg_d2[13];
extern cpg_float cpg_d3[13];
extern cpg_float cpg_d4[13];
extern cpg_float cpg_d5[13];
extern cpg_float cpg_d6[13];
extern cpg_float cpg_d7[13];
extern cpg_float cpg_d8[13];
extern cpg_float cpg_d9[13];
extern cpg_float cpg_d10[13];
extern cpg_float cpg_d11[156];
extern cpg_float cpg_d12[48];
extern cpg_float cpg_d13[11];
extern cpg_float cpg_d14[11];
extern cpg_float cpg_d16[11];
extern cpg_float cpg_d17[8];
extern cpg_float cpg_d18[8];
extern cpg_float cpg_d19[3];
extern cpg_float cpg_d20[3];
extern cpg_float cpg_d21[4];
extern cpg_float cpg_d22[4];
extern cpg_float cpg_d23[12];
extern cpg_float cpg_d24[12];
extern cpg_float cpg_d25[36];

// Struct containing primal solution
extern CPG_Prim_t CPG_Prim;

// Struct containing dual solution
extern CPG_Dual_t CPG_Dual;

// Struct containing solver info
extern CPG_Info_t CPG_Info;

// Struct containing solution and info
extern CPG_Result_t CPG_Result;

// Struct containing solver settings
extern Canon_Settings_t Canon_Settings;

// QOCO array of SOC dimensions
extern cpg_int qoco_q[25];

// QOCO workspace
extern QOCOSolver* qoco_solver;

// QOCO exit flag
extern cpg_int qoco_flag;
