
"""
Auto-generated by CVXPYgen on July 19, 2025 at 17:32:05.
Content: Custom solve method for CVXPY interface.
"""

import time
import warnings
import numpy as np
from cvxpy.reductions import Solution
from cvxpy.problems.problem import SolverStats
from solver import cpg_module


standard_settings_names = {}


def squeeze_scalar(val):
    if isinstance(val, np.ndarray):
        val = val.squeeze()
        if val.shape == ():
            return val.item()
    return val


def cpg_solve(prob, updated_params=None, **kwargs):

    # set flags for updated parameters
    upd = cpg_module.cpg_updated()
    if updated_params is None:
        updated_params = ["w_tr", "f_dt_last", "gf_dt_last", "f_ct_last", "A_ct_last", "B_ct_last", "C_ct_last", "S_ct_last", "X_last", "f_bar", "A_bar", "B_bar", "C_bar", "S_bar", "U_last", "S_last"]
    for p in updated_params:
        try:
            setattr(upd, p, True)
        except AttributeError:
            raise AttributeError(f"{p} is not a parameter.")

    # set solver settings
    cpg_module.set_solver_default_settings()
    for key, value in kwargs.items():
        try:
            eval(f'cpg_module.set_solver_{standard_settings_names.get(key, key)}(value)')
        except AttributeError:
            raise AttributeError(f'Solver setting "{key}" not available.')

    # set parameter values
    par = cpg_module.cpg_params()
    param_dict = prob.param_dict
    par.w_tr = squeeze_scalar(param_dict["w_tr"].value)
    par.f_dt_last = squeeze_scalar(param_dict["f_dt_last"].value)
    par.gf_dt_last = list(param_dict["gf_dt_last"].value.flatten(order="F"))
    par.f_ct_last = squeeze_scalar(param_dict["f_ct_last"].value)
    par.A_ct_last = list(param_dict["A_ct_last"].value.flatten(order="F"))
    par.B_ct_last = list(param_dict["B_ct_last"].value.flatten(order="F"))
    par.C_ct_last = list(param_dict["C_ct_last"].value.flatten(order="F"))
    par.S_ct_last = list(param_dict["S_ct_last"].value.flatten(order="F"))
    par.X_last = list(param_dict["X_last"].value.flatten(order="F"))
    par.f_bar = list(param_dict["f_bar"].value.flatten(order="F"))
    par.A_bar = list(param_dict["A_bar"].value.flatten(order="F"))
    par.B_bar = list(param_dict["B_bar"].value.flatten(order="F"))
    par.C_bar = list(param_dict["C_bar"].value.flatten(order="F"))
    par.S_bar = list(param_dict["S_bar"].value.flatten(order="F"))
    par.U_last = list(param_dict["U_last"].value.flatten(order="F"))
    par.S_last = list(param_dict["S_last"].value.flatten(order="F"))

    # solve
    t0 = time.time()
    res = cpg_module.solve(upd, par)
    t1 = time.time()

    # store solution in problem object
    prob._clear_solution()
    prob.var_dict['dx'].save_value(np.array(res.cpg_prim.dx).reshape((13, 12), order='F'))
    prob.var_dict['du'].save_value(np.array(res.cpg_prim.du).reshape((4, 12), order='F'))
    prob.var_dict['ds'].save_value(np.array(res.cpg_prim.ds).reshape((1, 11), order='F'))
    prob.var_dict['nu'].save_value(np.array(res.cpg_prim.nu).reshape((13, 11), order='F'))
    prob.var_dict['S'].save_value(np.array(res.cpg_prim.S).reshape((1, 11), order='F'))
    prob.var_dict['X'].save_value(np.array(res.cpg_prim.X).reshape((13, 12), order='F'))
    prob.var_dict['U'].save_value(np.array(res.cpg_prim.U).reshape((4, 12), order='F'))
    prob.constraints[0].save_dual_value(np.array(res.cpg_dual.d0).reshape(13))
    prob.constraints[1].save_dual_value(np.array(res.cpg_dual.d1).reshape(13))
    prob.constraints[2].save_dual_value(np.array(res.cpg_dual.d2).reshape(13))
    prob.constraints[3].save_dual_value(np.array(res.cpg_dual.d3).reshape(13))
    prob.constraints[4].save_dual_value(np.array(res.cpg_dual.d4).reshape(13))
    prob.constraints[5].save_dual_value(np.array(res.cpg_dual.d5).reshape(13))
    prob.constraints[6].save_dual_value(np.array(res.cpg_dual.d6).reshape(13))
    prob.constraints[7].save_dual_value(np.array(res.cpg_dual.d7).reshape(13))
    prob.constraints[8].save_dual_value(np.array(res.cpg_dual.d8).reshape(13))
    prob.constraints[9].save_dual_value(np.array(res.cpg_dual.d9).reshape(13))
    prob.constraints[10].save_dual_value(np.array(res.cpg_dual.d10).reshape(13))
    prob.constraints[11].save_dual_value(np.array(res.cpg_dual.d11).reshape((13, 12), order='F'))
    prob.constraints[12].save_dual_value(np.array(res.cpg_dual.d12).reshape((4, 12), order='F'))
    prob.constraints[13].save_dual_value(np.array(res.cpg_dual.d13).reshape((1, 11), order='F'))
    prob.constraints[14].save_dual_value(np.array(res.cpg_dual.d14).reshape(11))
    prob.constraints[15].save_dual_value(np.array(res.cpg_dual.d15))
    prob.constraints[16].save_dual_value(np.array(res.cpg_dual.d16).reshape(11))
    prob.constraints[17].save_dual_value(np.array(res.cpg_dual.d17).reshape(8))
    prob.constraints[18].save_dual_value(np.array(res.cpg_dual.d18).reshape(8))
    prob.constraints[19].save_dual_value(np.array(res.cpg_dual.d19).reshape(3))
    prob.constraints[20].save_dual_value(np.array(res.cpg_dual.d20).reshape(3))
    prob.constraints[21].save_dual_value(np.array(res.cpg_dual.d21).reshape(4))
    prob.constraints[22].save_dual_value(np.array(res.cpg_dual.d22).reshape(4))
    prob.constraints[23].save_dual_value(np.array(res.cpg_dual.d23).reshape(12))
    prob.constraints[24].save_dual_value(np.array(res.cpg_dual.d24).reshape(12))
    prob.constraints[25].save_dual_value(np.array(res.cpg_dual.d25).reshape((3, 12), order='F'))

    # store additional solver information in problem object
    prob._status = "%d (for description visit https://qoco-org.github.io/qoco/)" % res.cpg_info.status
    if abs(res.cpg_info.obj_val) == 1e30:
        prob._value = np.sign(res.cpg_info.obj_val) * np.inf
    else:
        prob._value = res.cpg_info.obj_val
    primal_vars = {var.id: var.value for var in prob.variables()}
    dual_vars = {c.id: c.dual_value for c in prob.constraints}
    solver_specific_stats = {'obj_val': res.cpg_info.obj_val,
                             'status': prob._status,
                             'iter': res.cpg_info.iter,
                             'pri_res': res.cpg_info.pri_res,
                             'dua_res': res.cpg_info.dua_res,
                             'time': res.cpg_info.time}
    attr = {'solve_time': t1 - t0, 'solver_specific_stats': solver_specific_stats, 'num_iters': res.cpg_info.iter}
    prob._solution = Solution(prob.status, prob.value, primal_vars, dual_vars, attr)
    results_dict = {'solver_specific_stats': solver_specific_stats,
                    'num_iters': res.cpg_info.iter,
                    'solve_time': t1 - t0}
    prob._solver_stats = SolverStats.from_dict(results_dict, 'QOCO')

    return prob.value


def cpg_gradient(prob, gradient_sol_primal=None, gradient_sol_dual=None):

    # set gradient primal and dual solutions if provided
    gradient_sol = cpg_module.cpg_gsol()
    if gradient_sol_primal is not None and gradient_sol_dual is not None:
        gradient_sol.primal = list(gradient_sol_primal)
        gradient_sol.dual = list(gradient_sol_dual)
        use_sol = True
    else:
        gradient_sol.primal = [0] * 788
        gradient_sol.dual = [0] * 1102
        use_sol = False

    # set variable deltas
    vdelta = cpg_module.cpg_vdelta()
    vdelta.dx = list(prob.var_dict["dx"].gradient.flatten(order="F"))
    vdelta.du = list(prob.var_dict["du"].gradient.flatten(order="F"))
    vdelta.ds = list(prob.var_dict["ds"].gradient.flatten(order="F"))
    vdelta.nu = list(prob.var_dict["nu"].gradient.flatten(order="F"))
    vdelta.S = list(prob.var_dict["S"].gradient.flatten(order="F"))
    vdelta.X = list(prob.var_dict["X"].gradient.flatten(order="F"))
    vdelta.U = list(prob.var_dict["U"].gradient.flatten(order="F"))
    pdelta = cpg_module.gradient(vdelta, gradient_sol, use_sol)
    prob.param_dict['w_tr'].gradient = np.array(pdelta.w_tr)
    prob.param_dict['f_dt_last'].gradient = np.array(pdelta.f_dt_last).reshape(1)
    prob.param_dict['gf_dt_last'].gradient = np.array(pdelta.gf_dt_last).reshape((1, 156), order='F')
    prob.param_dict['f_ct_last'].gradient = np.array(pdelta.f_ct_last).reshape(1)
    prob.param_dict['A_ct_last'].gradient = np.array(pdelta.A_ct_last).reshape((1, 143), order='F')
    prob.param_dict['B_ct_last'].gradient = np.array(pdelta.B_ct_last).reshape((1, 44), order='F')
    prob.param_dict['C_ct_last'].gradient = np.array(pdelta.C_ct_last).reshape((1, 44), order='F')
    prob.param_dict['S_ct_last'].gradient = np.array(pdelta.S_ct_last).reshape((1, 11), order='F')
    prob.param_dict['X_last'].gradient = np.array(pdelta.X_last).reshape((13, 12), order='F')
    prob.param_dict['f_bar'].gradient = np.array(pdelta.f_bar).reshape((13, 11), order='F')
    prob.param_dict['A_bar'].gradient = np.array(pdelta.A_bar).reshape((169, 11), order='F')
    prob.param_dict['B_bar'].gradient = np.array(pdelta.B_bar).reshape((52, 11), order='F')
    prob.param_dict['C_bar'].gradient = np.array(pdelta.C_bar).reshape((52, 11), order='F')
    prob.param_dict['S_bar'].gradient = np.array(pdelta.S_bar).reshape((13, 11), order='F')
    prob.param_dict['U_last'].gradient = np.array(pdelta.U_last).reshape((4, 12), order='F')
    prob.param_dict['S_last'].gradient = np.array(pdelta.S_last).reshape((1, 11), order='F')


def forward(params, context):

    info = {}
    kwargs = context.solver_args.copy()
    prob = kwargs.pop("problem")
    parameters = prob.parameters()
    for pid, val in zip(context.param_ids, params):
        next(p for p in parameters if p.id == pid).value = val
    updated_params = kwargs.pop("updated_params", None)
    _, info["gradient_primal"], info["gradient_dual"] = cpg_solve_and_gradient_info(prob, updated_params, **kwargs)
    info["prob"] = prob

    vars = prob.variables()
    return [next(v for v in vars if v.id == variable.id).value for variable in context.variables], info


def backward(dvars, context):

    prob = context.info["prob"]
    vars = prob.variables()
    for variable, dv in zip(context.variables, dvars):
        next(v for v in vars if v.id == variable.id).gradient = dv
    gradient_primal = context.info["gradient_primal"]
    gradient_dual = context.info["gradient_dual"]
    cpg_gradient(prob, gradient_primal, gradient_dual)

    params = prob.parameters()
    return [next(p for p in params if p.id == pid).gradient for pid in context.param_ids], {}
